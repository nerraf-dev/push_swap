class Node {
    int value;
    int count;
    Node next;

    Node(int value) {
        this.value = value;
        this.count = 0;
        this.next = null;
    }
}

public class CountingSort {
    public void sort(int[] arr) {
        if (arr.length == 0) return;

        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        int i = 0;

        // Find min and max values
        while (i < arr.length) {
            if (arr[i] < min) {
                min = arr[i];
            }
            if (arr[i] > max) {
                max = arr[i];
            }
            i++;
        }

        int offset = 0 - min;
        int range = max - min + 1;

        // Create linked list for counts
        Node head = new Node(0);
        Node current = head;
        for (i = 1; i < range; i++) {
            current.next = new Node(i);
            current = current.next;
        }

        // Populate counts
        i = 0;
        while (i < arr.length) {
            current = head;
            int index = arr[i] + offset;
            while (index > 0) {
                current = current.next;
                index--;
            }
            current.count++;
            i++;
        }

        // Reconstruct the sorted array
        i = 0;
        current = head;
        while (current != null) {
            while (current.count > 0) {
                arr[i++] = current.value - offset;
                current.count--;
            }
            current = current.next;
        }
    }

    public static void main(String[] args) {
        CountingSort sorter = new CountingSort();
        int[] arr = {5, 3, -4, 9, 1};
        sorter.sort(arr);
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}